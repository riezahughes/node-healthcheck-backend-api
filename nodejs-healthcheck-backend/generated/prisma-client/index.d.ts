// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  endpoint: (where?: EndpointWhereInput) => Promise<boolean>;
  error: (where?: ErrorWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  endpoint: (where: EndpointWhereUniqueInput) => EndpointNullablePromise;
  endpoints: (args?: {
    where?: EndpointWhereInput;
    orderBy?: EndpointOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Endpoint>;
  endpointsConnection: (args?: {
    where?: EndpointWhereInput;
    orderBy?: EndpointOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EndpointConnectionPromise;
  error: (where: ErrorWhereUniqueInput) => ErrorNullablePromise;
  errors: (args?: {
    where?: ErrorWhereInput;
    orderBy?: ErrorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Error>;
  errorsConnection: (args?: {
    where?: ErrorWhereInput;
    orderBy?: ErrorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ErrorConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEndpoint: (data: EndpointCreateInput) => EndpointPromise;
  updateEndpoint: (args: {
    data: EndpointUpdateInput;
    where: EndpointWhereUniqueInput;
  }) => EndpointPromise;
  updateManyEndpoints: (args: {
    data: EndpointUpdateManyMutationInput;
    where?: EndpointWhereInput;
  }) => BatchPayloadPromise;
  upsertEndpoint: (args: {
    where: EndpointWhereUniqueInput;
    create: EndpointCreateInput;
    update: EndpointUpdateInput;
  }) => EndpointPromise;
  deleteEndpoint: (where: EndpointWhereUniqueInput) => EndpointPromise;
  deleteManyEndpoints: (where?: EndpointWhereInput) => BatchPayloadPromise;
  createError: (data: ErrorCreateInput) => ErrorPromise;
  updateError: (args: {
    data: ErrorUpdateInput;
    where: ErrorWhereUniqueInput;
  }) => ErrorPromise;
  updateManyErrors: (args: {
    data: ErrorUpdateManyMutationInput;
    where?: ErrorWhereInput;
  }) => BatchPayloadPromise;
  upsertError: (args: {
    where: ErrorWhereUniqueInput;
    create: ErrorCreateInput;
    update: ErrorUpdateInput;
  }) => ErrorPromise;
  deleteError: (where: ErrorWhereUniqueInput) => ErrorPromise;
  deleteManyErrors: (where?: ErrorWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  endpoint: (
    where?: EndpointSubscriptionWhereInput
  ) => EndpointSubscriptionPayloadSubscription;
  error: (
    where?: ErrorSubscriptionWhereInput
  ) => ErrorSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ErrorOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "time_of_error_ASC"
  | "time_of_error_DESC"
  | "notes_ASC"
  | "notes_DESC";

export type EndpointOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "is_working_ASC"
  | "is_working_DESC"
  | "file_name_ASC"
  | "file_name_DESC"
  | "last_checked_ASC"
  | "last_checked_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type EndpointWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ErrorWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  endpoint?: Maybe<EndpointWhereInput>;
  time_of_error?: Maybe<DateTimeInput>;
  time_of_error_not?: Maybe<DateTimeInput>;
  time_of_error_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  time_of_error_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  time_of_error_lt?: Maybe<DateTimeInput>;
  time_of_error_lte?: Maybe<DateTimeInput>;
  time_of_error_gt?: Maybe<DateTimeInput>;
  time_of_error_gte?: Maybe<DateTimeInput>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  AND?: Maybe<ErrorWhereInput[] | ErrorWhereInput>;
  OR?: Maybe<ErrorWhereInput[] | ErrorWhereInput>;
  NOT?: Maybe<ErrorWhereInput[] | ErrorWhereInput>;
}

export interface EndpointWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  is_working?: Maybe<Boolean>;
  is_working_not?: Maybe<Boolean>;
  file_name?: Maybe<String>;
  file_name_not?: Maybe<String>;
  file_name_in?: Maybe<String[] | String>;
  file_name_not_in?: Maybe<String[] | String>;
  file_name_lt?: Maybe<String>;
  file_name_lte?: Maybe<String>;
  file_name_gt?: Maybe<String>;
  file_name_gte?: Maybe<String>;
  file_name_contains?: Maybe<String>;
  file_name_not_contains?: Maybe<String>;
  file_name_starts_with?: Maybe<String>;
  file_name_not_starts_with?: Maybe<String>;
  file_name_ends_with?: Maybe<String>;
  file_name_not_ends_with?: Maybe<String>;
  last_checked?: Maybe<DateTimeInput>;
  last_checked_not?: Maybe<DateTimeInput>;
  last_checked_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  last_checked_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  last_checked_lt?: Maybe<DateTimeInput>;
  last_checked_lte?: Maybe<DateTimeInput>;
  last_checked_gt?: Maybe<DateTimeInput>;
  last_checked_gte?: Maybe<DateTimeInput>;
  errors_every?: Maybe<ErrorWhereInput>;
  errors_some?: Maybe<ErrorWhereInput>;
  errors_none?: Maybe<ErrorWhereInput>;
  AND?: Maybe<EndpointWhereInput[] | EndpointWhereInput>;
  OR?: Maybe<EndpointWhereInput[] | EndpointWhereInput>;
  NOT?: Maybe<EndpointWhereInput[] | EndpointWhereInput>;
}

export type ErrorWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface EndpointCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  is_working?: Maybe<Boolean>;
  file_name: String;
  last_checked?: Maybe<DateTimeInput>;
  errors?: Maybe<ErrorCreateManyWithoutEndpointInput>;
}

export interface ErrorCreateManyWithoutEndpointInput {
  create?: Maybe<
    ErrorCreateWithoutEndpointInput[] | ErrorCreateWithoutEndpointInput
  >;
  connect?: Maybe<ErrorWhereUniqueInput[] | ErrorWhereUniqueInput>;
}

export interface ErrorCreateWithoutEndpointInput {
  id?: Maybe<ID_Input>;
  notes?: Maybe<String>;
}

export interface EndpointUpdateInput {
  name?: Maybe<String>;
  is_working?: Maybe<Boolean>;
  file_name?: Maybe<String>;
  last_checked?: Maybe<DateTimeInput>;
  errors?: Maybe<ErrorUpdateManyWithoutEndpointInput>;
}

export interface ErrorUpdateManyWithoutEndpointInput {
  create?: Maybe<
    ErrorCreateWithoutEndpointInput[] | ErrorCreateWithoutEndpointInput
  >;
  delete?: Maybe<ErrorWhereUniqueInput[] | ErrorWhereUniqueInput>;
  connect?: Maybe<ErrorWhereUniqueInput[] | ErrorWhereUniqueInput>;
  set?: Maybe<ErrorWhereUniqueInput[] | ErrorWhereUniqueInput>;
  disconnect?: Maybe<ErrorWhereUniqueInput[] | ErrorWhereUniqueInput>;
  update?: Maybe<
    | ErrorUpdateWithWhereUniqueWithoutEndpointInput[]
    | ErrorUpdateWithWhereUniqueWithoutEndpointInput
  >;
  upsert?: Maybe<
    | ErrorUpsertWithWhereUniqueWithoutEndpointInput[]
    | ErrorUpsertWithWhereUniqueWithoutEndpointInput
  >;
  deleteMany?: Maybe<ErrorScalarWhereInput[] | ErrorScalarWhereInput>;
  updateMany?: Maybe<
    ErrorUpdateManyWithWhereNestedInput[] | ErrorUpdateManyWithWhereNestedInput
  >;
}

export interface ErrorUpdateWithWhereUniqueWithoutEndpointInput {
  where: ErrorWhereUniqueInput;
  data: ErrorUpdateWithoutEndpointDataInput;
}

export interface ErrorUpdateWithoutEndpointDataInput {
  notes?: Maybe<String>;
}

export interface ErrorUpsertWithWhereUniqueWithoutEndpointInput {
  where: ErrorWhereUniqueInput;
  update: ErrorUpdateWithoutEndpointDataInput;
  create: ErrorCreateWithoutEndpointInput;
}

export interface ErrorScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  time_of_error?: Maybe<DateTimeInput>;
  time_of_error_not?: Maybe<DateTimeInput>;
  time_of_error_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  time_of_error_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  time_of_error_lt?: Maybe<DateTimeInput>;
  time_of_error_lte?: Maybe<DateTimeInput>;
  time_of_error_gt?: Maybe<DateTimeInput>;
  time_of_error_gte?: Maybe<DateTimeInput>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  AND?: Maybe<ErrorScalarWhereInput[] | ErrorScalarWhereInput>;
  OR?: Maybe<ErrorScalarWhereInput[] | ErrorScalarWhereInput>;
  NOT?: Maybe<ErrorScalarWhereInput[] | ErrorScalarWhereInput>;
}

export interface ErrorUpdateManyWithWhereNestedInput {
  where: ErrorScalarWhereInput;
  data: ErrorUpdateManyDataInput;
}

export interface ErrorUpdateManyDataInput {
  notes?: Maybe<String>;
}

export interface EndpointUpdateManyMutationInput {
  name?: Maybe<String>;
  is_working?: Maybe<Boolean>;
  file_name?: Maybe<String>;
  last_checked?: Maybe<DateTimeInput>;
}

export interface ErrorCreateInput {
  id?: Maybe<ID_Input>;
  endpoint: EndpointCreateOneWithoutErrorsInput;
  notes?: Maybe<String>;
}

export interface EndpointCreateOneWithoutErrorsInput {
  create?: Maybe<EndpointCreateWithoutErrorsInput>;
  connect?: Maybe<EndpointWhereUniqueInput>;
}

export interface EndpointCreateWithoutErrorsInput {
  id?: Maybe<ID_Input>;
  name: String;
  is_working?: Maybe<Boolean>;
  file_name: String;
  last_checked?: Maybe<DateTimeInput>;
}

export interface ErrorUpdateInput {
  endpoint?: Maybe<EndpointUpdateOneRequiredWithoutErrorsInput>;
  notes?: Maybe<String>;
}

export interface EndpointUpdateOneRequiredWithoutErrorsInput {
  create?: Maybe<EndpointCreateWithoutErrorsInput>;
  update?: Maybe<EndpointUpdateWithoutErrorsDataInput>;
  upsert?: Maybe<EndpointUpsertWithoutErrorsInput>;
  connect?: Maybe<EndpointWhereUniqueInput>;
}

export interface EndpointUpdateWithoutErrorsDataInput {
  name?: Maybe<String>;
  is_working?: Maybe<Boolean>;
  file_name?: Maybe<String>;
  last_checked?: Maybe<DateTimeInput>;
}

export interface EndpointUpsertWithoutErrorsInput {
  update: EndpointUpdateWithoutErrorsDataInput;
  create: EndpointCreateWithoutErrorsInput;
}

export interface ErrorUpdateManyMutationInput {
  notes?: Maybe<String>;
}

export interface EndpointSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EndpointWhereInput>;
  AND?: Maybe<
    EndpointSubscriptionWhereInput[] | EndpointSubscriptionWhereInput
  >;
  OR?: Maybe<EndpointSubscriptionWhereInput[] | EndpointSubscriptionWhereInput>;
  NOT?: Maybe<
    EndpointSubscriptionWhereInput[] | EndpointSubscriptionWhereInput
  >;
}

export interface ErrorSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ErrorWhereInput>;
  AND?: Maybe<ErrorSubscriptionWhereInput[] | ErrorSubscriptionWhereInput>;
  OR?: Maybe<ErrorSubscriptionWhereInput[] | ErrorSubscriptionWhereInput>;
  NOT?: Maybe<ErrorSubscriptionWhereInput[] | ErrorSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Endpoint {
  id: ID_Output;
  name: String;
  is_working?: Boolean;
  file_name: String;
  last_checked?: DateTimeOutput;
}

export interface EndpointPromise extends Promise<Endpoint>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  is_working: () => Promise<Boolean>;
  file_name: () => Promise<String>;
  last_checked: () => Promise<DateTimeOutput>;
  errors: <T = FragmentableArray<Error>>(args?: {
    where?: ErrorWhereInput;
    orderBy?: ErrorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EndpointSubscription
  extends Promise<AsyncIterator<Endpoint>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  is_working: () => Promise<AsyncIterator<Boolean>>;
  file_name: () => Promise<AsyncIterator<String>>;
  last_checked: () => Promise<AsyncIterator<DateTimeOutput>>;
  errors: <T = Promise<AsyncIterator<ErrorSubscription>>>(args?: {
    where?: ErrorWhereInput;
    orderBy?: ErrorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EndpointNullablePromise
  extends Promise<Endpoint | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  is_working: () => Promise<Boolean>;
  file_name: () => Promise<String>;
  last_checked: () => Promise<DateTimeOutput>;
  errors: <T = FragmentableArray<Error>>(args?: {
    where?: ErrorWhereInput;
    orderBy?: ErrorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Error {
  id: ID_Output;
  time_of_error: DateTimeOutput;
  notes?: String;
}

export interface ErrorPromise extends Promise<Error>, Fragmentable {
  id: () => Promise<ID_Output>;
  endpoint: <T = EndpointPromise>() => T;
  time_of_error: () => Promise<DateTimeOutput>;
  notes: () => Promise<String>;
}

export interface ErrorSubscription
  extends Promise<AsyncIterator<Error>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  endpoint: <T = EndpointSubscription>() => T;
  time_of_error: () => Promise<AsyncIterator<DateTimeOutput>>;
  notes: () => Promise<AsyncIterator<String>>;
}

export interface ErrorNullablePromise
  extends Promise<Error | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  endpoint: <T = EndpointPromise>() => T;
  time_of_error: () => Promise<DateTimeOutput>;
  notes: () => Promise<String>;
}

export interface EndpointConnection {
  pageInfo: PageInfo;
  edges: EndpointEdge[];
}

export interface EndpointConnectionPromise
  extends Promise<EndpointConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EndpointEdge>>() => T;
  aggregate: <T = AggregateEndpointPromise>() => T;
}

export interface EndpointConnectionSubscription
  extends Promise<AsyncIterator<EndpointConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EndpointEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEndpointSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface EndpointEdge {
  node: Endpoint;
  cursor: String;
}

export interface EndpointEdgePromise
  extends Promise<EndpointEdge>,
    Fragmentable {
  node: <T = EndpointPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EndpointEdgeSubscription
  extends Promise<AsyncIterator<EndpointEdge>>,
    Fragmentable {
  node: <T = EndpointSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEndpoint {
  count: Int;
}

export interface AggregateEndpointPromise
  extends Promise<AggregateEndpoint>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEndpointSubscription
  extends Promise<AsyncIterator<AggregateEndpoint>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ErrorConnection {
  pageInfo: PageInfo;
  edges: ErrorEdge[];
}

export interface ErrorConnectionPromise
  extends Promise<ErrorConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ErrorEdge>>() => T;
  aggregate: <T = AggregateErrorPromise>() => T;
}

export interface ErrorConnectionSubscription
  extends Promise<AsyncIterator<ErrorConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ErrorEdgeSubscription>>>() => T;
  aggregate: <T = AggregateErrorSubscription>() => T;
}

export interface ErrorEdge {
  node: Error;
  cursor: String;
}

export interface ErrorEdgePromise extends Promise<ErrorEdge>, Fragmentable {
  node: <T = ErrorPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ErrorEdgeSubscription
  extends Promise<AsyncIterator<ErrorEdge>>,
    Fragmentable {
  node: <T = ErrorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateError {
  count: Int;
}

export interface AggregateErrorPromise
  extends Promise<AggregateError>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateErrorSubscription
  extends Promise<AsyncIterator<AggregateError>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface EndpointSubscriptionPayload {
  mutation: MutationType;
  node: Endpoint;
  updatedFields: String[];
  previousValues: EndpointPreviousValues;
}

export interface EndpointSubscriptionPayloadPromise
  extends Promise<EndpointSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EndpointPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EndpointPreviousValuesPromise>() => T;
}

export interface EndpointSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EndpointSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EndpointSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EndpointPreviousValuesSubscription>() => T;
}

export interface EndpointPreviousValues {
  id: ID_Output;
  name: String;
  is_working?: Boolean;
  file_name: String;
  last_checked?: DateTimeOutput;
}

export interface EndpointPreviousValuesPromise
  extends Promise<EndpointPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  is_working: () => Promise<Boolean>;
  file_name: () => Promise<String>;
  last_checked: () => Promise<DateTimeOutput>;
}

export interface EndpointPreviousValuesSubscription
  extends Promise<AsyncIterator<EndpointPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  is_working: () => Promise<AsyncIterator<Boolean>>;
  file_name: () => Promise<AsyncIterator<String>>;
  last_checked: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ErrorSubscriptionPayload {
  mutation: MutationType;
  node: Error;
  updatedFields: String[];
  previousValues: ErrorPreviousValues;
}

export interface ErrorSubscriptionPayloadPromise
  extends Promise<ErrorSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ErrorPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ErrorPreviousValuesPromise>() => T;
}

export interface ErrorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ErrorSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ErrorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ErrorPreviousValuesSubscription>() => T;
}

export interface ErrorPreviousValues {
  id: ID_Output;
  time_of_error: DateTimeOutput;
  notes?: String;
}

export interface ErrorPreviousValuesPromise
  extends Promise<ErrorPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  time_of_error: () => Promise<DateTimeOutput>;
  notes: () => Promise<String>;
}

export interface ErrorPreviousValuesSubscription
  extends Promise<AsyncIterator<ErrorPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  time_of_error: () => Promise<AsyncIterator<DateTimeOutput>>;
  notes: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Endpoint",
    embedded: false
  },
  {
    name: "Error",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
